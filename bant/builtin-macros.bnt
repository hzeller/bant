# -*- Python -*-
# Bant built-in macros written in bant declarative language itself.
#
# Assignments of tuples with declarations to identifiers representing the
# macro name.
#
# The tuples contain regular bazel rules that are expanded in place of the
# original rule with that macro-name; this provides more information for bant
# to see through the build-rules for commands such as `bant dwyu`.
#
# At macro expansion time, names from the macro kwargs are expanded inside.
#
# Note: Initial implementation, this mmight change any time. This file is
# compiled into the binary.

## TODO simplify various protobuf hacks in bant by providing equivalent macros

##
# rules found in various projects. For now, this is build into bant,
# but eventually these should be files loaded per project.
# Note: these only need to be 'approximate', enough for bant to know what files
# and libraries are provided, broken down into bazel building blocks.
# Use bant_skip_dependency_check = True in cc_library() to skip dwyu there.
#
# Genrules often have the same name as corresponding cc_library(); this allows
# to accurately report where something is coming from. Same name for different
# things is not valid of course of real bulid files, but if dwyu purposes,
# they are in different name spaces.
##

### Found in bazel_rules_hdl, verible.
genlex = genrule(
    name = name,
    srcs = [src],
    outs = [out],
)

genyacc = genrule(
    name = name,
    srcs = [src],
    outs = [header_out, source_out] + extra_outs,
)

### LLVM-project.
gentbl_cc_library = (
    # first approximation not sure if well reflected.
    genrule(
        name = name,
        srcs = [td_file],
        # tbl_outs is a list of tuples, second value the filename we need.
        outs = [filename for (_, filename) in tbl_outs],
    ),
    cc_library(
        name = name,
        hdrs = [filename for (_, filename) in tbl_outs],
        bant_skip_dependency_check = True,
    ),
)

### Found in XLS.
xls_dslx_ir = genrule(
    name = name,
    outs = [
        name + ".ir",
        ir_file,
    ],
)

xls_dslx_opt_ir = genrule(
    name = name,
    outs = [
        name + ".ir",  # sometimes, they are derived from the name
        name + ".opt.ir",
        ir_file,  # ... sometimes from kwargs passed to rule.
        opt_ir_file,
    ],
)

xls_ir_opt_ir = genrule(
    name = name,
    outs = [
        name + ".opt.ir",  # from name
        opt_ir_file,  # from kwarg
    ],
)

cc_xls_ir_jit_wrapper = cc_library(
    name = name,
    srcs = [name + ".cc"],
    hdrs = [name + ".h"],
    bant_skip_dependency_check = True,
)

xls_dslx_cpp_type_library = (
    genrule(
        name = name,
        outs = [name + ".h"],
    ),
    cc_library(
        name = name,
        hdrs = [name + ".h"],
        bant_skip_dependency_check = True,
    ),
)

xls_dslx_ir_wrapper = cc_library(
    name = name + "_wrapper",
    hdrs = [name + "_wrapper.h"],
    bant_skip_dependency_check = True,
)

xls_ir_cc_library = (
    genrule(
        name = name,
        outs = [name + ".h"],
    ),
    cc_library(
        name = name,
        hdrs = [name + ".h"],
        bant_skip_dependency_check = True,
    ),
)

xls_dslx_verilog = genrule(
    name = name,
    outs = [
        (verilog_file.rsplit(".", 1))[0] + ".block.ir",
        (verilog_file.rsplit(".", 1))[0] + ".codegen_options.textproto",
        (verilog_file.rsplit(".", 1))[0] + ".schedule_options.textproto",
        (verilog_file.rsplit(".", 1))[0] + ".sig.textproto",
        verilog_file,
    ],
)

xls_ir_verilog = genrule(
    name = name,
    outs = [
        (verilog_file.rsplit(".", 1))[0] + ".block.ir",
        (verilog_file.rsplit(".", 1))[0] + ".codegen_options.textproto",
        (verilog_file.rsplit(".", 1))[0] + ".schedule_options.textproto",
        (verilog_file.rsplit(".", 1))[0] + ".sig.textproto",
        verilog_file,
    ],
)
