// bant - Bazel Navigation Tool
// Copyright (C) 2024 Henner Zeller <h.zeller@acm.org>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

#ifndef BANT_TOOL_HEADER_PROVIDER_
#define BANT_TOOL_HEADER_PROVIDER_

#include <cstdlib>
#include <optional>
#include <ostream>
#include <string>
#include <string_view>

#include "absl/container/btree_set.h"
#include "bant/frontend/parsed-project.h"
#include "bant/session.h"
#include "bant/types-bazel.h"
#include "bant/types.h"

// TODO: Given that this not only provides HeaderToLibMapping but also
// from Genrule, the name of this file is somewhat a misnomer.

namespace bant {

// Map describing what file has been provided by which target.
// This should be a 1:1 relationship. However, some libraries have been observed
// to provide the same hader. So, OneToN it is there..
using ProvidedFromTarget = OneToOne<std::string, BazelTarget>;
using ProvidedFromTargetSet = OneToNSet<std::string, BazelTarget>;

// Givent the "project", creates a mapping of all headers that are exported by
// cc_library() targets to their respective targets.
// If "suffix_index" is set, output is compatible with FinxBySuffix()
ProvidedFromTargetSet ExtractHeaderToLibMapping(const ParsedProject &project,
                                                std::ostream &info_out,
                                                bool suffix_index = false);

// Similar for sources. Much simpler, as we don't deal with multiple search
// paths. Mostly just for printing.
ProvidedFromTargetSet ExtractSourceToLibMapping(const ParsedProject &project,
                                                std::ostream &info_out);

// Find all the output generated by genrules. Should really only be 1:1.
// If "suffix_index" is set, output is compatible with FinxBySuffix().
ProvidedFromTarget ExtractGeneratedFromGenrule(const ParsedProject &project,
                                               std::ostream &info_out,
                                               bool suffix_index = false);

struct FindResult {
  std::string match;  // Found match. Different from query if fuzzy match.
  const absl::btree_set<BazelTarget> *target_set;
  int fuzzy_score = 0;  // 0 if exact match otherwise path element count.
};

// Find a set of target that fuzzily match the suffix of the given key.
// index is required to be generated with reverse keys, i.e. "reverse_index"
// set to true when generating.
// If there is no full match, "min_fuzzy_path" selects the minimum number of
// path components that need to match. E.g. a match of foo/bar/baz.h would be 3.
std::optional<FindResult> FindBySuffix(const ProvidedFromTargetSet &index,
                                       std::string_view key,
                                       size_t min_fuzzy_paths = 2);

// Pretty provided files and targets they are coming from in two columns.
void PrintProvidedSources(Session &session, const std::string &table_header,
                          const BazelTargetMatcher &pattern,
                          const ProvidedFromTarget &provided_from_lib);

void PrintProvidedSources(Session &session, const std::string &table_header,
                          const BazelTargetMatcher &pattern,
                          const ProvidedFromTargetSet &provided_from_lib);

}  // namespace bant

#endif  // BANT_TOOL_HEADER_PROVIDER_
