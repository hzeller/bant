// bant - Bazel Navigation Tool
// Copyright (C) 2024 Henner Zeller <h.zeller@acm.org>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

#ifndef BANT_TOOL_HEADER_PROVIDER_
#define BANT_TOOL_HEADER_PROVIDER_

#include <optional>
#include <ostream>
#include <string>

#include "bant/frontend/parsed-project.h"
#include "bant/session.h"
#include "bant/types.h"

// TODO: Given that this not only provides HeaderToLibMapping but also
// from Genrule, the name of this file is somewhat a misnomer.

namespace bant {

// Map describing what file has been provided by which target.
// This should be a 1:1 relationship. However, some libraries have been observed
// to provide the same hader. So, OneToN it is there..
using ProvidedFromTarget = OneToOne<std::string, BazelTarget>;
using ProvidedFromTargetSet = OneToNSet<std::string, BazelTarget>;

// Givent the "project", creates a mapping of all headers that are exported by
// cc_library() targets to their respective targets.
// If "reverse_index" is set, the key is emitted as reversed string allow
// suffix search.
ProvidedFromTargetSet ExtractHeaderToLibMapping(const ParsedProject &project,
                                                std::ostream &info_out,
                                                bool reverse_index = false);

// Find all the output generated by genrules. Should really only be 1:1
// If "reverse_index" is set, the key is emitted as reversed string allow
// suffix search.
ProvidedFromTarget ExtractGeneratedFromGenrule(const ParsedProject &project,
                                               std::ostream &info_out,
                                               bool reverse_index = false);

// Find a set of target that fuzzily match the suffix of the given key.
// index is required to be generated with reverse keys, i.e. "reverse_index"
// set to true when generating.
std::optional<ProvidedFromTargetSet::const_iterator> FindBySuffix(
  const ProvidedFromTargetSet &index, std::string_view key);

// Pretty provided files and targets they are coming from in two columns.
void PrintProvidedSources(Session &session, const std::string &table_header,
                          const BazelPattern &pattern,
                          const ProvidedFromTarget &provided_from_lib);

void PrintProvidedSources(Session &session, const std::string &table_header,
                          const BazelPattern &pattern,
                          const ProvidedFromTargetSet &provided_from_lib);

}  // namespace bant

#endif  // BANT_TOOL_HEADER_PROVIDER_
